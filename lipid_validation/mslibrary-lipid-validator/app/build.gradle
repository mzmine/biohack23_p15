/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://m.lifs-tools.org/artifactory/libs-release"
    }
    maven { url = "file://" + projectDir + "/src/main/lib" }
    // For jmzml, etc.
    maven { url = "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/" }
    // For SIRIUS ID modules
    maven { url = "https://bio.informatik.uni-jena.de/repository/libs-oss/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://www.xypron.de/repository/" }
    // For cpdetector
    maven { url = "https://nexus.nuiton.org/nexus/content/groups/releases/" }
    // For jimzml
    // maven { url = "https://mvnrepository.com/artifact/com.alanmrace/jimzmlparser" }
}

ext {
    jgoslinVersion = '2.1.0'
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launchchemspider-apier'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'

    implementation('io.github.mzmine:mzmine3:3.9.3') {
        exclude group: 'org.rsc.chemspider', module: 'chemspider-api'
        exclude group: 'mzmine', module: 'jmprojection'
        exclude group: 'mzmine', module: 'gslibml'
        exclude group: 'org.du-lab.adap', module: 'adap'
        exclude group: 'gnf', module: 'clustering'
    }
    implementation "org.lifs-tools:jgoslin-parsers:$jgoslinVersion"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.mzmine.mslibrary.lipid.validator.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}
